#include <FastLED.h>
#include <Wire.h>
#include <SPI.h>
#include <SparkFunCCS811.h>
#include <SparkFunBME280.h>
#include <SFE_MicroOLED.h>

#define BME_ADDR = 0x77
#define CCS811_ADDR = 0x5B

#define PIN_RESET 0
#define DC_JUMPER 0
#define DATA_OUT 0
#define CLOCK_OUT 0
#define NUM_LEDS 2
#define LED_TYPE APA102
#define COLOR_ORDER BGR
#define UPDATES_PER_SECOND 50
#define BRIGHTNESS 60; 

#define therm 0
#define heatPad 0 
#define capButt 0

#define 

MicroOLED oLED(PIN_RESET, DC_JUMPER);
CCS811 myCCS811(CCS811_ADDR);
BME280 myBME; 
CRGB leds[NUM_LEDS];
CRGBPalette16 currentPalette;
TBlendType currentBlending;

extern const TProgmemPalette16 hotCold_p PROGMEM; 

void setup() {
  FastLED.addLeds<LED_TYPE, DATA_OUT, CLOCK_OUT, COLOR_ORDER>(leds, NUM_LEDS).setCOrrection( TypicalLEDStrip );
  FastLED.setBrightness( BRIGHTNESS );
	CCS811Core::status returnCode = myCCS811.begin();
	Serial.println("CCS811....");
	printDriverError(returnCode);
	Serial.println("");

  myBME.settings.commINterface = I2C_MODE;
  myBME.settings.I2CAddress = BME_ADDR;
  myBME.settings.runMode=3; 
  myBME.settings.tStandby=0; 
  myBME.settings.filter=4; 
  myBME.settings.tempOverSample=5; 
  myBME.settings.pressOverSample=5; 
  myBME.settings.humidOverSample=5; 
	delay(10);

	Serial.print("Starting BME(should be 0x60): ");
	uint8_t bmeBeginValue = myBME.begin();
	Serial.println(	bmeBeginValue );

  currentPalette = hotCold_p;
  currentBlending = LINEARBLEND;

	pinMode(ther, OUTPUT);
	pinMode(heatPad, OUTPUT);
	pinMode(capButt, OUTPUT);
	

  Serial.begin(57600); 
}

void loop() 
{

	if( get_booch_temp() < 75 ) digitalWrite(heatPad, HIGH); 
	else if( get_booch_temp() > 85 ) digitalWrite(heatPad, LOW); 

	if( capButton == true )
	{
		float	ambTemp = read_BME("temp");
		float ambHumid = read_BME("humidity"); 
		float ambAir = get_ambient_air();
		
	}
} 

float get_ambient_temp(String toCheck)
{
	if( toCheck == "temp" )
	{
		Serial.print("Temperature: ");
		float tempTemp = myBME.readTempF(),2; 
		Serial.println(tempTemp); 
		return tempTemp;
	}
	else if( toCheck = "humidity" )
	{
		Serial.print("Humidity: "); 
		float tempHumid = myBME.readFloatHumidity(),2
		return tempHumid;
	}
}

float get_ambient_air()
{
	boolean foundData = false; 
	Serial.println("Giving temperature and humidy settings to CCS811.");
	Serial.print("Temp in Celsius");
	float BMEtempC = myBME.readTempC();
	Serial.println(BMEtempC);
	Serial.print("Humidity in Chamber:" ); 
	float BMEhumid = myBME.readFloatHumidity();
	Serial.println(BMEhumid);
	myCCS811.setEnvironmentalData(BMEhumid, BMEtempC);
	Serial.println("Checking CCS811 for data"); 
	for( int i=0; i < 10; i++ )
	{	
		if( myCCS811.dataAvailable() )
		{
			myCCS811.readAlgorithmResults();
			printInfoSerial();
			foundData = true; 
			return true;
		}
		else if( myCCS811.checkForStatusError() )
		{
			printSensorError();
			foundData = false;
			return false;
		}
	}
	if( foundData == false ) Serial.println(" NO AIR DATA "); 
}

void printDriverError( CCS811Core::status errorCode )
{
  switch ( errorCode )
  {
    case CCS811Core::SENSOR_SUCCESS:
      Serial.print("SUCCESS");
      break;
    case CCS811Core::SENSOR_ID_ERROR:
      Serial.print("ID_ERROR");
      break;
    case CCS811Core::SENSOR_I2C_ERROR:
      Serial.print("I2C_ERROR");
      break;
    case CCS811Core::SENSOR_INTERNAL_ERROR:
      Serial.print("INTERNAL_ERROR");
      break;
    case CCS811Core::SENSOR_GENERIC_ERROR:
      Serial.print("GENERIC_ERROR");
      break;
    default:
      Serial.print("Unspecified error.");
  }
}

void printSensorError()
{
  uint8_t error = myCCS811.getErrorRegister();

  if ( error == 0xFF ) //comm error
  {
    Serial.println("Failed to get ERROR_ID register.");
  }
  else
  {
    Serial.print("Error: ");
    if (error & 1 << 5) Serial.print("HeaterSupply");
    if (error & 1 << 4) Serial.print("HeaterFault");
    if (error & 1 << 3) Serial.print("MaxResistance");
    if (error & 1 << 2) Serial.print("MeasModeInvalid");
    if (error & 1 << 1) Serial.print("ReadRegInvalid");
    if (error & 1 << 0) Serial.print("MsgInvalid");
    Serial.println();
  }
}	
